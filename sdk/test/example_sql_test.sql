-----------------------------------------------------------------------------------------------
--
--                                        :::::::::::
--                                        : WARNING :
--                                        :::::::::::
--
--                                   DO NOT EDIT THIS FILE
--                               IT WAS AUTOMATICALLY GENERATED
--                                CHANGES MAY BE OVERWRITTEN
--
-----------------------------------------------------------------------------------------------

BEGIN;

      -----------------------------------------------
      -- helper setup (TODO we can put in a different file since it will be the same for all tests)
      -----------------------------------------------

      create temporary table intercepted (
        event text not null,
        event_date timestamptz not null default now()
      );

      create or replace function last_intercepted()
        returns text as
        $$
          select top 1 event from intercepted order by event_date desc;
        $$ language plpgsql strict;

      create or replace function fsm.handle_machine_events(payload fooo)
        returns void as
        $$
          insert into intercepted (event) values ('foo');-- TODO get event name from inside the payload
          return;
        $$ language plpgsql strict;

      -----------------------------------------------
      -- test setup
      -----------------------------------------------

      select new_machine_with_lastest_statechart_thing_fn()... -- TODO

      -----------------------------------------------
      -- real test
      -----------------------------------------------
      
      plan(n); -- where n we get from the num of hops in the path

      --select notify_state_machine(1,:mid, '', ''::jsonb);
      with bar as bar (select notify_state_machine(1,:mid, '', ''::jsonb);
      with foo as foo (select last_intercepted()) select is(:foo,'invoice.created_action');

      select notify_state_machine(1,:mid, '', ''::jsonb);
      with bar as bar (select fsm.state_machine_state where ...;
      with foo as foo (select last_intercepted()) select is(:foo,'invoice.soft_reminder_action');

      select notify_state_machine(1,:mid, '', ''::jsonb);
      with bar as bar (select fsm.state_machine_state where ...;
      with foo as foo (select last_intercepted()) select is(:foo,'invoice.due_date_action');

      -- TODO the other hops

      finish();

ROLLBACK;
