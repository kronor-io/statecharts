/Users/axel-axul/Developer/statecharts/sdk/test/Plugin/Haskell/Chart3.hs:15:7-75: Splicing expression
    makeRelativeToProject "test/Plugin/SCXML/chart3.scxml"
      >>= liftString
  ======>
    "/Users/axel-axul/Developer/statecharts/sdk/test/Plugin/SCXML/chart3.scxml"
/Users/axel-axul/Developer/statecharts/sdk/test/Plugin/Haskell/Chart3.hs:(13,1)-(15,76): Splicing declarations
    genCodeFromFile
      "chart3"
      ("/Users/axel-axul/Developer/statecharts/sdk/test/Plugin/SCXML/chart3.scxml")
  ======>
    data Chart3States
      = Chart3StatesS1 |
        Chart3StatesS2 |
        Chart3StatesS3 |
        Chart3StatesS6 |
        Chart3StatesS7 |
        Chart3StatesS8 |
        Chart3StatesS9 |
        Chart3StatesS4 |
        Chart3StatesS5
      deriving (Show, Eq, Ord)
    instance AsText Chart3States where
      toText Chart3StatesS1 = "s1"
      toText Chart3StatesS2 = "s2"
      toText Chart3StatesS3 = "s3"
      toText Chart3StatesS6 = "s6"
      toText Chart3StatesS7 = "s7"
      toText Chart3StatesS8 = "s8"
      toText Chart3StatesS9 = "s9"
      toText Chart3StatesS4 = "s4"
      toText Chart3StatesS5 = "s5"
    data Chart3Events
      = Chart3EventsEv1 |
        Chart3EventsEv2 |
        Chart3EventsEv3 |
        Chart3EventsEv4 |
        Chart3EventsEv5 |
        Chart3EventsEv6 |
        Chart3EventsEv7 |
        Chart3EventsEv8 |
        Chart3EventsEv9 |
        Chart3EventsEv10
      deriving (Show, Eq, Ord)
    instance AsText Chart3Events where
      toText Chart3EventsEv1 = "ev1"
      toText Chart3EventsEv2 = "ev2"
      toText Chart3EventsEv3 = "ev3"
      toText Chart3EventsEv4 = "ev4"
      toText Chart3EventsEv5 = "ev5"
      toText Chart3EventsEv6 = "ev6"
      toText Chart3EventsEv7 = "ev7"
      toText Chart3EventsEv8 = "ev8"
      toText Chart3EventsEv9 = "ev9"
      toText Chart3EventsEv10 = "ev10"
    chart3
      = ((Chart "01") Chart3StatesS1)
          [stateS1, stateS2, stateS3, stateS6, stateS7, stateS8, stateS9]
      where
          stateS1
            = ((((NormalState Chart3StatesS1)
                   [((Transition Chart3EventsEv1) Chart3StatesS1) Chart3StatesS2])
                  "s1n")
                 [Script "table1.action5"])
                []
          stateS2
            = ((((NormalState Chart3StatesS2)
                   [((Transition Chart3EventsEv2) Chart3StatesS2) Chart3StatesS3,
                    ((Transition Chart3EventsEv3) Chart3StatesS2) Chart3StatesS9,
                    ((Transition Chart3EventsEv4) Chart3StatesS2) Chart3StatesS7])
                  "s2n")
                 [Script "table1.action4"])
                []
          stateS3
            = ((((((MultiState Chart3StatesS3) Chart3StatesS4)
                    [stateS4, stateS5])
                   [((Transition Chart3EventsEv5) Chart3StatesS3) Chart3StatesS6,
                    ((Transition Chart3EventsEv6) Chart3StatesS3) Chart3StatesS8,
                    ((Transition Chart3EventsEv7) Chart3StatesS3) Chart3StatesS9,
                    ((Transition Chart3EventsEv8) Chart3StatesS3) Chart3StatesS7])
                  "s3n")
                 [Script "table1.action3"])
                []
          stateS6
            = (((Final Chart3StatesS6) "s6n") [Script "table1.action1"]) []
          stateS7 = (((Final Chart3StatesS7) "s7n") []) []
          stateS8 = (((Final Chart3StatesS8) "s8n") []) []
          stateS9 = (((Final Chart3StatesS9) "s9n") []) []
          stateS4
            = ((((NormalState Chart3StatesS4)
                   [((Transition Chart3EventsEv9) Chart3StatesS4) Chart3StatesS5])
                  "s4n")
                 [])
                []
          stateS5
            = ((((NormalState Chart3StatesS5)
                   [((Transition Chart3EventsEv10) Chart3StatesS5) Chart3StatesS4])
                  "s5n")
                 [Script "table1.action2"])
                []
