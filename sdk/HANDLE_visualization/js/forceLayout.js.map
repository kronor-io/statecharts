{"version":3,"sources":["layout.coffee"],"names":[],"mappings":"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","file":"forceLayout.js","sourceRoot":"/source/","sourcesContent":["force = window.forceLayout = {}\n\nKIELER_URL = 'http://kieler.herokuapp.com/live'\nMARGIN = 5\nROUND_CORNER = 5\nCELL_MIN = {w: 15, h: 15}\nCELL_PAD = {top: 12, bottom: 12, left: 12, right: 12}\nEXPORT_PAD = {top: 10, bottom: 10, left: 10, right: 10}\nLABEL_SPACE = 400\nLINK_STRENGTH = .1\nLINK_DISTANCE = 30\nDEBUG_FORCE_FACTOR = 50\nMIN_ZOOM = 1/6\nMAX_ZOOM = 6\nANIMATION_SPEED = 2\nGEOMETRY_VERSION = 2\nBORDER_INSET = 3\nSRC_PREVIEW_LIMIT = 40\n\n\nstrip = (obj) ->\n  for key, value of obj\n    if value?\n      if _.isArray(value) and value.length == 0\n        delete obj[key]\n      else if _.isObject(value)\n        strip(value)\n        if _.isEmpty(value)\n          delete obj[key]\n    else\n      delete obj[key]\n  return obj\n\n\ntreeFromXml = (doc) ->\n  parseActions = (container) ->\n    rv = []\n    for child in container.childNodes\n      if child.tagName\n        rv.push(action = {label: \"<#{child.tagName}>\"})\n        if child.tagName == 'script'\n          firstLine = $(child).text().trim().split(/\\n/)[0]\n          if firstLine.length > SRC_PREVIEW_LIMIT\n            firstLine = firstLine.slice(0, SRC_PREVIEW_LIMIT - 4) + ' ...'\n          action.preview = firstLine\n    return rv\n\n  parseChildNodes = (node) ->\n    transitions = []\n    onentry = []\n    onexit = []\n\n    for child in node.childNodes\n      switch child.tagName\n        when 'transition'\n          target = child.getAttribute('target')\n          if target and target.indexOf(' ') > -1\n            throw new Error(\"not implemented: transition with multiple targets\")\n          unless target\n            target = node.getAttribute('id')\n          transitions.push(strip(\n            target: target\n            cond: child.getAttribute('cond') or null\n            event: child.getAttribute('event') or null\n            actions: parseActions(child)\n          ))\n\n        when 'onentry'\n          onentry = onentry.concat(parseActions(child))\n\n        when 'onexit'\n          onexit = onexit.concat(parseActions(child))\n\n    return {\n      transitions: transitions\n      onentry: onentry\n      onexit: onexit\n    }\n\n  parseStates = (node) ->\n    stateList = []\n    for node in node.childNodes\n      state = switch node.tagName\n        when 'initial'\n          {\n            type: 'initial'\n            id: node.getAttribute('id') or null\n            children: parseStates(node)\n          }\n\n        when 'state'\n          {\n            type: 'state'\n            id: node.getAttribute('id') or null\n            children: parseStates(node)\n          }\n\n        when 'final'\n          {\n            type: 'final'\n            id: node.getAttribute('id') or null\n            children: parseStates(node)\n          }\n\n        when 'parallel'\n          {\n            type: 'parallel'\n            id: node.getAttribute('id') or null\n            children: parseStates(node)\n          }\n\n        when 'history'\n          {\n            type: 'history'\n            id: node.getAttribute('id') or null\n            deep: node.getAttribute('type') == 'deep' or null\n          }\n\n      if state?\n        _.extend(state, parseChildNodes(node))\n        stateList.push(strip(state))\n\n    return stateList\n\n  return {sc: parseStates(doc.documentElement)}\n\n\nidMaker = ->\n  counterMap = d3.map()\n  return (prefix='_force_id_') ->\n    counter = counterMap.get(prefix) or 0\n    counter += 1\n    counterMap.set(prefix, counter)\n    return \"#{prefix}#{counter}\"\n\n\nnextId = idMaker()\n\n\nwalk = (node, callback, parent=null, postorder=false) ->\n  callback(node, parent) unless postorder\n  for child in node.children or []\n    walk(child, callback, node, postorder)\n  callback(node, parent) if postorder\n\n\nparents = (node) ->\n  if node.parent then parents(node.parent).concat([node.parent]) else []\n\n\nidPath = (node) ->\n  parents(node).join('/')\n\n\npath = (node1, node2) ->\n  parents1 = parents(node1)\n  parents2 = parents(node2)\n  eq = 0\n  for n in [0 .. d3.min([parents1.length, parents2.length]) - 1]\n    if parents1[n] != parents2[n] then break\n    eq = n\n  return [node1, parents1[eq], node2]\n\n\nmidpoint = (a, b) -> {\n  x: ((a.x or 0) + (b.x or 0)) / 2\n  y: ((a.y or 0) + (b.y or 0)) / 2\n}\n\n\nfindTransition = (transitions, source, target) ->\n  for tr in transitions\n    if tr.a.id == source and tr.b.id == target\n      return tr\n\n\nenvelope = (node, pad={}) ->\n  xValues = []\n  yValues = []\n\n  for box in [].concat(node.children, node.controls)\n    xValues.push(box.x - box.w / 2)\n    xValues.push(box.x + box.w / 2)\n    yValues.push(box.y - box.h / 2)\n    yValues.push(box.y + box.h / 2)\n\n  for tr in node.controls\n    for point in [].concat(tr.route.segment1, tr.route.segment2)\n      xValues.push(point[0])\n      yValues.push(point[1])\n\n  return [\n    d3.min(xValues) - (pad.left or 0)\n    d3.max(xValues) + (pad.right or 0)\n    d3.min(yValues) - (pad.top or 0) - (node.topPadding or 0)\n    d3.max(yValues) + (pad.bottom or 0)\n  ]\n\n\nactionSvg = (options) ->\n  actionR = options.g.append('rect')\n\n  actionT = options.g.append('text')\n      .attr('y', 12)\n\n  actionT.append('tspan')\n      .text(options.action.label)\n\n  if options.action.preview\n      actionT.append('tspan')\n          .attr('x', 0)\n          .attr('dy', 16)\n          .text(options.action.preview)\n\n  bbox = actionT[0][0].getBBox()\n  h = bbox.height\n  w = bbox.width + 10\n  actionR\n      .attr('height', h)\n      .attr('width', w)\n      .attr('x', -w/2)\n      .attr('rx', 10)\n      .attr('ry', 10)\n\n  return [w, h]\n\n\nactionBlockSvg = (actions, parentG) ->\n  y = 0\n  maxw = 0\n  for action in actions\n    actionG = parentG.append('g')\n        .attr('class', 'action')\n        .attr('transform', \"translate(0,#{y})\")\n\n    [w, h] = actionSvg(action: action, g: actionG)\n    y += h\n    maxw = d3.max([maxw, w])\n\n  return [maxw, y]\n\n\ntoKielerFormat = (node) ->\n  children = []\n  edges = []\n  for child in node.children or []\n    children.push(toKielerFormat(child))\n  for tr in node.controls or []\n    children.push(\n      id: tr.id\n      desmTransition: true\n      width: tr.w\n      height: tr.h\n      ports: [\n        {id: \"#{tr.id}#enter\", x: 0, y: tr.yPort}\n        {id: \"#{tr.id}#exit\", x: tr.w, y: tr.yPort}\n      ]\n      properties:\n        portConstraints: 'FIXED_POS'\n    )\n    edges.push(\n      id: \"#{tr.id}#1\"\n      source: tr.a.id\n      target: tr.id\n      targetPort: \"#{tr.id}#enter\"\n    )\n    edges.push(\n      id: \"#{tr.id}#2\"\n      source: tr.id\n      target: tr.b.id\n      sourcePort: \"#{tr.id}#exit\"\n    )\n  node_header = node.header or CELL_MIN\n  node_min_size = node.minSize or {w: 0, h: 0}\n  rv = {\n    id: node.id\n    children: children\n    edges: edges\n    padding: {top: node_header.h or 0}\n    width: node_min_size.w\n    height: node_min_size.h\n    properties:\n      minWidth: node_min_size.w\n      minHeight: node_min_size.h\n      sizeConstraint: 'MINIMUM_SIZE'\n  }\n  return rv\n\n\napplyKielerLayout = (options) ->\n  s = options.s\n  graph = options.graph\n  kNodeMap = d3.map()\n  kEdgeMap = d3.map()\n  offsetMap = d3.map()\n\n  offsetMap.set('__ROOT__', {\n    x: -graph.width / 2\n    y: -graph.height / 2\n  })\n  walk graph, (kNode) =>\n    kNodeMap.set(kNode.id, kNode)\n    offset = offsetMap.get(kNode.id)\n    padding = _.extend({top: 0, left: 0}, kNode.padding)\n    for kChild in kNode.children or []\n      offsetMap.set(kChild.id, {\n        x: offset.x + (kNode.x or 0) + (padding.left or 0)\n        y: offset.y + (kNode.y or 0) + (padding.top or 0)\n      })\n    for kEdge in kNode.edges or []\n      kEdgeMap.set(kEdge.id, kEdge)\n\n  traverse = (kNode) ->\n    if kNode.desmTransition\n      tr = s.nodeMap.get(kNode.id)\n      offset1 = offsetMap.get(tr.a.id)\n      offset2 = offsetMap.get(tr.id)\n      kTr = kNodeMap.get(tr.id)\n      tr.x = offset2.x + kTr.x + kTr.width/2\n      tr.y = offset2.y + kTr.y + kTr.height/2\n\n      e1 = kEdgeMap.get(\"#{tr.id}#1\")\n      e2 = kEdgeMap.get(\"#{tr.id}#2\")\n\n      translate1 = (d) -> [offset1.x + d.x, offset1.y + d.y]\n      translate2 = (d) -> [offset2.x + d.x, offset2.y + d.y]\n\n      tr.route = {\n        src: translate1(e1.sourcePoint)\n        segment1: (e1.bendPoints or []).map(translate1)\n        label1: translate1(e1.targetPoint)\n        label2: translate2(e2.sourcePoint)\n        segment2: (e2.bendPoints or []).map(translate2)\n        dst: translate2(e2.targetPoint)\n      }\n\n    else if kNode.id != '__ROOT__'\n      node = s.nodeMap.get(kNode.id)\n      offset = offsetMap.get(kNode.id)\n      node.w = kNode.width\n      node.h = kNode.height\n      node.x = offset.x + (kNode.x or 0) + node.w/2\n      node.y = offset.y + (kNode.y or 0) + node.h/2\n\n    for kChild in kNode.children or []\n      traverse(kChild)\n\n  traverse(graph)\n\n\nkielerLayout = (s, options) ->\n  algorithm = options.algorithm or '__klayjs'\n  top = s.top\n\n  graph = toKielerFormat(top)\n  console.log('graph ',graph )\n\n  if algorithm == '__klayjs'\n    klay_ready = Q.defer()\n    $klay.layout(\n      graph: graph\n      options:\n        layoutHierarchy: true\n        edgeRouting: 'ORTHOGONAL'\n        feedBackEdges: true\n      success: klay_ready.resolve\n      error: (err) -> klay_ready.reject(new Error(err.text))\n    )\n\n    layoutDone = klay_ready.promise\n\n  else\n    form = {\n      graph: JSON.stringify(graph)\n      config: JSON.stringify(\n        algorithm: algorithm\n        edgeRouting: 'ORTHOGONAL'\n        feedBackEdges: true\n        layoutHierarchy: true\n      )\n      iFormat: 'org.json'\n      oFormat: 'org.json'\n    }\n\n    layoutDone = Q($.post(KIELER_URL, form))\n      .catch (resp) ->\n        throw Error(resp.responseText)\n      .then (resp) ->\n        return JSON.parse(resp)[0]\n\n  return layoutDone\n\n\nclass NewNodesAnimation\n\n  constructor: (@newNodes) ->\n    @deferred = Q.defer()\n    @promise = @deferred.promise\n    @done = no\n    @targetMap = d3.map()\n    @abort() unless @newNodes.length > 0\n\n    for node in @newNodes\n      @targetMap.set(node.id, {w: node.w, h: node.h})\n      node.w = node.h = 5\n\n  tick: ->\n    return if @done\n    changed = no\n    for node in @newNodes\n      target = @targetMap.get(node.id)\n      (node.w += ANIMATION_SPEED; changed = yes) if node.w < target.w\n      (node.h += ANIMATION_SPEED; changed = yes) if node.h < target.h\n\n    @abort() unless changed\n\n  abort: ->\n    @done = yes\n    @deferred.resolve()\n\n\nclass LoadingOverlay\n\n  constructor: (options) ->\n    w = $(options.svg).width()\n    h = $(options.svg).height()\n    @el = d3.select(options.svg).append('g')\n        .attr('class', \"loadingOverlay\")\n    @el.append('rect')\n        .attr('width', w)\n        .attr('height', h)\n    @el.append('text')\n        .attr('x', w/2)\n        .attr('y', h/2)\n        .text(options.text)\n\n  destroy: ->\n    @el.remove()\n\n\nclass force.Layout\n\n  constructor: (options) ->\n    @id = nextId()\n    @queue = async.queue(((task, cb) -> task(cb)), 1)\n    @options = options\n    @debug = options.debug or false\n    @svgCreate(options.parent)\n    @s = @_emptyState()\n    @animation = new NewNodesAnimation([])\n    @_initialTree(options.tree or treeFromXml(options.doc).sc)\n\n  _initialTree: (tree) ->\n    deferred = Q.defer()\n    @initialized = deferred.promise\n\n    @queue.push (cb) =>\n      try\n        @loadTree(tree)\n\n        if @options.geometry?\n          @applyGeometry(@options.geometry)\n          @svgUpdate()\n          cb()\n          deferred.resolve()\n\n        else\n          loading = new LoadingOverlay(svg: @el, text: \"Loading Kieler layout ...\")\n          deferred.resolve(\n            @_kielerLayout()\n            .then =>\n              loading.destroy()\n              cb()\n          )\n\n      catch e\n        deferred.reject(e)\n        cb()\n\n  _kielerLayout: (options={}) ->\n    kielerLayout(@s, algorithm: @options.kielerAlgorithm)\n      .then (graph) =>\n        applyKielerLayout(s: @s, graph: graph)\n      .then =>\n        @svgUpdate(animate: options.animate)\n\n  update: (doc) ->\n    deferred = Q.defer()\n    @queue.push (cb) =>\n      deferred.resolve(\n        Q()\n        .then =>\n          @loadTree(treeFromXml(doc).sc)\n          @_kielerLayout(animate: true)\n        .finally =>\n          cb()\n      )\n\n    return deferred.promise\n\n  _emptyState: ->\n    s = {\n      nodes: []\n      cells: []\n      nodeMap: d3.map()\n      links: []\n      transitions: []\n      top: {\n        id: '__ROOT__'\n        children: []\n        controls: []\n      }\n      newNodes: []\n      dom: d3.map()\n    }\n    s.nodeMap.set(s.top.id, s.top)\n    return s\n\n  loadTree: (tree) ->\n    @mergeTree(tree)\n    @svgNodes()\n\n  mergeTree: (tree) ->\n    oldS = @s\n    newS = @_emptyState()\n    newS.top.children = tree\n\n    makeId = idMaker()\n\n    for topNode in tree\n      walk topNode, (node, parent) =>\n        if node.id\n          node.label = node.id\n          node.autoId = false\n        else\n          node.id = makeId(\"_node_\")\n          node.autoId = true\n          node.label = \"<#{node.type}>\"\n        node.isInitial = false\n        node.controls = []\n        node.children = node.children or []\n        if (oldNode = oldS.nodeMap.get(node.id))?\n          node.x = oldNode.x\n          node.y = oldNode.y\n          node.header = oldNode.header\n        else\n          if parent?\n            node.x = parent.x\n            node.y = parent.y\n          newS.newNodes.push(node)\n        newS.nodes.push(node)\n        newS.cells.push(node)\n        newS.nodeMap.set(node.id, node)\n        node.parent = if parent? then newS.nodeMap.get(parent.id) else newS.top\n\n    for topNode in tree\n      walk topNode, (node) =>\n        for tr in node.transitions or []\n          unless (target = newS.nodeMap.get(tr.target))?\n            throw Error(\"missing transition target: #{tr.target}\")\n          [a, c, b] = path(node, target)\n          tr.parent = c or newS.top\n          tr.id = tr.id or makeId(\"_transition/#{node.id}/#{target.id}/\")\n          if (oldTr = oldS.nodeMap.get(tr.id))?\n            tr.w = oldTr.w\n            tr.h = oldTr.h\n            tr.yPort = oldTr.yPort\n          else\n            tr.w = 0\n            tr.h = 0\n            tr.yPort = 0\n          newS.nodeMap.set(tr.id, tr)\n          tr.parent.controls.push(tr)\n          newS.nodes.push(tr)\n          for [link_source, link_target] in d3.pairs([a, tr, b])\n            newS.links.push(\n              source: link_source\n              target: link_target\n            )\n          label = tr.event or ''\n          tr.a = a\n          tr.b = b\n          tr.selfie = node.id == tr.target\n          tr.label = label\n          newS.transitions.push(tr)\n          if (oldTr = findTransition(oldS.transitions, tr.a.id, tr.b.id))?\n            _.extend(tr, {x: oldTr.x, y: oldTr.y})\n          else\n            _.extend(tr, midpoint(tr.a, tr.b))\n\n    walk {children: tree}, (node) =>\n      return unless node.children.length\n\n      for child in node.children\n        if child.type == 'initial'\n          child.isInitial = true\n          return\n\n        if child.id == '@initial' and not child.children.length\n          child.isInitial = true\n          return\n\n      first = node.children[0]\n      if first.autoId and first.children.length == 0\n        first.isInitial = true\n\n    @s = newS\n\n  saveGeometry: ->\n    round = (x) -> Math.round(x)\n    return JSON.stringify({\n      nodes: {\n        id: n.id\n        w: round(n.w)\n        h: round(n.h)\n        x: round(n.x)\n        y: round(n.y)\n      } for n in @s.nodes\n      transitions: {\n        id: tr.id\n        route: tr.route\n      } for tr in @s.transitions\n      version: GEOMETRY_VERSION\n    })\n\n  applyGeometry: (geom_json) ->\n    geom = JSON.parse(geom_json)\n    return if geom.version != GEOMETRY_VERSION\n    for saved in geom.nodes\n      if (node = @s.nodeMap.get(saved.id))?\n        node.w = saved.w\n        node.h = saved.h\n    for saved in geom.transitions or []\n      if (tr = @s.nodeMap.get(saved.id))?\n        tr.route = saved.route\n    @svgUpdate()\n\n  svgCreate: (parent) ->\n    @zoomBehavior = d3.behavior.zoom()\n        .scaleExtent([MIN_ZOOM, MAX_ZOOM])\n\n    @svg = d3.select(parent).append('svg')\n        .attr('xmlns:xmlns:xlink', 'http://www.w3.org/1999/xlink')\n        .classed('force-layout', true)\n        .classed('debug', @debug)\n    @el = @svg[0][0]\n    defs = @svg.append('defs')\n    @svg.call(@zoomBehavior)\n    @container = @svg.append('g')\n\n    @zoomBehavior.on 'zoom', =>\n        e = d3.event\n        @container.attr('transform', \"translate(#{e.translate}),scale(#{e.scale})\")\n\n    defs.append('marker')\n        .attr('id', \"#{@id}-arrow\")\n        .attr('refX', '7')\n        .attr('refY', '5')\n        .attr('markerWidth', '10')\n        .attr('markerHeight', '10')\n        .attr('orient', 'auto')\n      .append('path')\n        .attr('d', 'M 0 0 L 10 5 L 0 10 z')\n        .attr('class', 'arrow')\n\n    @invalidateSize()\n\n  invalidateSize: ->\n    $parent = $(@el).parent()\n    width = $parent.width() - 5\n    height = $parent.height() - 5\n\n    d3.select(@el)\n        .attr('width', width)\n        .attr('height', height)\n\n    @zoomBehavior\n        .size([width, height])\n        .translate([width / 2, height / 2])\n\n    @zoomBehavior.event(@svg)\n\n  svgNodes: ->\n    cellUpdate = @container.selectAll('.cell')\n        .data(@s.cells, (d) -> d.id)\n\n    newCell = cellUpdate.enter().append('g')\n\n    newCell.append('rect')\n        .attr('class', 'border')\n\n    newCell.append('g')\n        .attr('class', 'cell-header')\n\n    cellUpdate.each (node) ->\n        d3.select(@)\n            .attr('class',\n              \"cell cell-#{node.type or 'state'}\n               #{if node.isInitial then 'cell-isInitial' else ''}\")\n            .classed('parallel-child', node.parent.type == 'parallel')\n\n        header = d3.select(@).select('.cell-header')\n        header.selectAll('*').remove()\n\n        if node.isInitial\n          node.minSize = {w: 10, h: 10}\n          return\n\n        if node.type == 'final'\n          d3.select(@).selectAll('.border-inset').remove()\n\n          d3.select(@).append('rect')\n            .attr('class', 'border-inset')\n            .attr('rx', ROUND_CORNER)\n            .attr('ry', ROUND_CORNER)\n\n        if node.type == 'history'\n          label_text = 'H'\n          corner_radius = 100\n        else\n          label_text = node.label\n          corner_radius = ROUND_CORNER\n\n        d3.select(@).select('.border')\n            .attr('rx', corner_radius)\n            .attr('ry', corner_radius)\n\n        label = header.append('text')\n          .text(label_text)\n          .attr('y', 12)\n\n        labelTextWidth = label[0][0].getBBox().width\n        wLabel = d3.min([labelTextWidth + 2 * ROUND_CORNER, LABEL_SPACE])\n        node.textWidth = wLabel\n\n        onentry = header.append('g')\n        onexit = header.append('g')\n        [wEntry, hEntry] = actionBlockSvg(node.onentry or [], onentry)\n        [wExit, hExit] = actionBlockSvg(node.onexit or [], onexit)\n\n        w = wEntry + wLabel + wExit\n        h = d3.max([16, hEntry, hExit])\n        if node.type == 'history'\n          h = w\n\n        label.attr('x', wEntry + wLabel / 2 - w/2)\n        onentry.attr('transform', \"translate(#{wEntry/2 - w/2},0)\")\n        onexit.attr('transform', \"translate(#{w/2 - wExit/2},0)\")\n        node.header = {w: w, h: h}\n        node.minSize = {w: w + 10, h: h + 10}\n\n    cellUpdate.exit().remove()\n\n    @container.selectAll('.cell').sort (a, b) ->\n        d3.ascending(idPath(a), idPath(b))\n\n    transitionUpdate = @container.selectAll('.transition')\n        .data(@s.transitions, (d) -> d.id)\n\n    transitionG = transitionUpdate.enter()\n      .append('g')\n        .attr('class', 'transition')\n\n    transitionG\n      .append('path')\n        .attr('class', 'transitionMask')\n\n    transitionG\n      .append('path')\n        .attr('class', 'transitionLine')\n        .attr('style', \"marker-end: url(##{@id}-arrow)\")\n        .attr('id', (tr) => \"#{@id}-transition/#{tr.id}\")\n\n    transitionG\n      .append('g')\n        .attr('class', 'transition-label')\n      .append('g')\n        .attr('class', 'transition-label-offset')\n\n    transitionUpdate.exit().remove()\n\n    transitionUpdate.each (tr) ->\n        offsetG = d3.select(@).select('.transition-label-offset')\n        offsetG.selectAll('*').remove()\n\n        transitionRect = offsetG.append('rect')\n\n        transitionText = offsetG.append('text')\n            .attr('y', 16)\n\n        transitionText.append('tspan')\n            .text(tr.label)\n\n        if tr.cond?\n          transitionText.append('tspan')\n              .text(\"[#{tr.cond}]\")\n              .attr('x', 0)\n              .attr('dy', 16)\n          y += 16\n\n        y = $(transitionText[0][0]).height() + 4\n        tr.yPort = y - 2\n\n        actionBlockG = offsetG.append('g')\n            .attr('transform', \"translate(0,#{y})\")\n        [w, h] = actionBlockSvg(tr.actions or [], actionBlockG)\n        y += h\n        tr.textWidth = d3.min([transitionText[0][0].getBBox().width + 5, LABEL_SPACE])\n        tr.w = d3.max([tr.w, tr.textWidth, w])\n        tr.h = y + 4\n\n        offsetG.attr('transform', \"translate(0,#{-tr.h/2})\")\n\n        transitionRect\n            .attr('x', (tr) -> -tr.w / 2)\n            .attr('width', (tr) -> tr.w)\n            .attr('height', (tr) -> tr.h)\n\n    dom = @s.dom\n\n    @container.selectAll('.cell')\n        .each (node) ->\n          dom.set(\"cell-#{node.id}\", @)\n\n    @container.selectAll('.transition')\n        .each (node) ->\n          dom.set(\"transition-#{node.id}\", @)\n\n  svgUpdate: (options) ->\n    options = _.extend({animate: false}, options)\n\n    if options.animate\n      animate = (sel) -> sel.transition()\n    else\n      animate = (sel) -> sel\n\n    @container.selectAll('.cell')\n        .classed('fixed', (node) -> node.fixed)\n\n    animate(@container.selectAll('.cell'))\n        .attr('transform', (node) -> \"translate(#{node.x},#{node.y})\")\n\n    @container.selectAll('.cell').each (node) ->\n        animate(d3.select(this).select('.border'))\n            .attr('x', - node.w / 2)\n            .attr('y', - node.h / 2)\n            .attr('width', node.w)\n            .attr('height', node.h)\n\n        animate(d3.select(this).select('.border-inset'))\n            .attr('x', - node.w / 2 + BORDER_INSET)\n            .attr('y', - node.h / 2 + BORDER_INSET)\n            .attr('width', node.w - 2 * BORDER_INSET)\n            .attr('height', node.h - 2 * BORDER_INSET)\n\n        animate(d3.select(this).select('.cell-header'))\n            .attr 'transform', (node) ->\n              \"translate(0,#{5 - node.h / 2})\"\n\n    trPath = (tr) ->\n      d3.svg.line()([].concat(\n        [tr.route.src]\n        tr.route.segment1\n        [tr.route.label1]\n        [tr.route.label2]\n        tr.route.segment2\n        [tr.route.dst]\n      ))\n\n    animate(@container.selectAll('.transition').select('.transitionMask'))\n        .attr('d', trPath)\n\n    animate(@container.selectAll('.transition').select('.transitionLine'))\n        .attr('d', trPath)\n\n    animate(@container.selectAll('.transition').select('.transition-label'))\n        .attr('transform', (tr) -> \"translate(#{tr.x},#{tr.y})\")\n\n  moveNode: (node, dx, dy) ->\n    node.x += dx\n    node.y += dy\n\n    translate = (p, dx, dy) -> p[0] += dx; p[1] += dy\n\n    if node.route?\n      translate(node.route.label1, dx, dy)\n      translate(node.route.label2, dx, dy)\n\n    else\n      for tr in @s.transitions\n        if tr.a.id == node.id\n          translate(tr.route.src, dx, dy)\n        if tr.b.id == node.id\n          translate(tr.route.dst, dx, dy)\n\n    for child in node.children or []\n      @moveNode(child, dx, dy)\n    for control in node.controls or []\n      @moveNode(control, dx, dy)\n\n  adjustLayout: ->\n    handleCollisions = (parent, center) =>\n      objects = [].concat(parent.children, parent.controls)\n      q = d3.geom.quadtree(objects)\n\n      for node in objects\n        nx1 = node.x - node.w - 100\n        nx2 = node.x + node.w + 100\n        ny1 = node.y - node.h - 100\n        ny2 = node.y + node.h + 100\n\n        collide = (quad, x1, y1, x2, y2) =>\n          other = quad.point\n          if other and (other != node)\n            dx = node.x - other.x\n            dy = node.y - other.y\n            w = (node.w + other.w) / 2 + MARGIN\n            h = (node.h + other.h) / 2 + MARGIN\n\n            cx = w - Math.abs(dx)\n            cy = h - Math.abs(dy)\n            if cx > 0 and cy > 0\n              na = node.w * node.h\n              oa = other.w * other.h\n              f = oa / (oa + na)\n\n              if cx/w < cy/h\n                dy1 = dy2 = 0\n                s = if dx > 0 then 1 else -1\n                dx1 = s * f * cx\n                dx2 = s * (f-1) * cx\n\n              else\n                dx1 = dx2 = 0\n                s = if dy > 0 then 1 else -1\n                dy1 = s * f * cy\n                dy2 = s * (f-1) * cy\n\n              @moveNode(node, dx1, dy1)\n              @moveNode(other, dx2, dy2)\n\n          return x1 > nx2 or x2 < nx1 or y1 > ny2 or y2 < ny1\n\n        q.visit(collide)\n\n\n    adjustNode = (node) =>\n      if node.children.length > 0\n        handleCollisions(node, node)\n        [xMin, xMax, yMin, yMax] = envelope(node, CELL_PAD)\n        grow = node.textWidth - (xMax - xMin)\n        if grow > 0\n          xMin -= grow / 2\n          xMax += grow / 2\n        node.w = xMax - xMin\n        node.h = yMax - yMin\n        dx = xMin + node.w / 2 - node.x\n        dy = yMin + node.h / 2 - node.y\n        node.x += dx\n        node.y += dy\n        if node.fixed\n          @moveNode(node, -dx, -dy)\n\n      node.weight = node.w * node.h\n\n    for node in @s.top.children\n      walk(node, adjustNode, null, true)\n\n    handleCollisions(@s.top, {x: 0, y: 0})\n\n  highlightState: (id, highlight=true) ->\n    @queue.push (cb) =>\n      d3.select(@s.dom.get(\"cell-#{id}\"))\n          .classed('highlight', highlight)\n      cb()\n\n  unhighlightAllStates: ->\n    @queue.push (cb) =>\n      d3.select(@el).selectAll('.cell.highlight')\n          .classed('highlight', false)\n      cb()\n\n  highlightTransition: (source, target, highlight=true) ->\n    @queue.push (cb) =>\n      if (tr = findTransition(@s.transitions, source, target))?\n        d3.select(@s.dom.get(\"transition-#{tr.id}\"))\n            .classed('highlight', highlight)\n      cb()\n\n  fit: ->\n    @queue.push (cb) =>\n      [xMin, xMax, yMin, yMax] = envelope(@s.top, EXPORT_PAD)\n      [w, h] = @zoomBehavior.size()\n      scale = d3.min([w / (xMax - xMin), h / (yMax - yMin)])\n      @zoomBehavior.translate([\n        w / 2 - (xMax + xMin) * scale / 2\n        h / 2 - (yMax + yMin) * scale / 2\n      ])\n      @zoomBehavior.scale(scale)\n      @zoomBehavior.event(@svg)\n      cb()\n\n  exportSvg: (options) ->\n    [xMin, xMax, yMin, yMax] = envelope(@s.top, EXPORT_PAD)\n    div = $('<div style=\"positoin:relative\">')[0]\n    svg = d3.select(div).append('svg')\n        .attr('xmlns', 'http://www.w3.org/2000/svg')\n        .classed('force-layout', true)\n    defs = d3.select(@el).select('defs')[0][0].cloneNode(true)\n    svg[0][0].appendChild(defs)\n    d3.select(defs).append('style').text(options.css)\n    container = @container[0][0].cloneNode(true)\n    d3.select(container).attr('transform', null)\n    svg[0][0].appendChild(container)\n    $('body').append(div)\n    bbox = container.getBBox()\n    $(div).remove()\n    svg.attr('viewBox', \"#{bbox.x} #{bbox.y} #{bbox.width} #{bbox.height}\")\n    return div.innerHTML\n\nforce.render = (options) ->\n  return new force.Layout(options)\n"]}