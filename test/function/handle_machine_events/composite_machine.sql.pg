BEGIN;
  select plan(10);

  \i test/fixtures/composite_machine.sql

  select fsm.start_machine(9000000001, machine_id := 80000000000);


  -- transition to the search state, which should activate all initial sub-states

  insert into fsm.state_machine_event
    (state_machine_id, name, data) values
    (80000000000, 'search', '{}');

  select lives_ok(
    $$ select fsm.handle_machine_events(80000000000) $$,
    'handled a single simple event'
  );

  select is(count(*), 0::bigint, 'all events should be handled')
  from fsm.state_machine_event
  where state_machine_id = 80000000000 and handled_at is null;

  select is(exited_at, now(), 'should have exited the initial event')
  from fsm.state_machine_state
  where state_machine_id = 80000000000 and state_id = 'initial';

  select is(
    array_agg(state_id)
  , array['binging', 'checking_bing', 'checking_google', 'googling', 'searching']
  , 'all initial states in the search tree should be active'
  )
  from (
    select state_id
    from fsm.state_machine_state
    where state_machine_id = 80000000000 and exited_at is null
    order by state_id
  ) c;

  -- Only get results from google now
  insert into fsm.state_machine_event
    (state_machine_id, name, data) values
    (80000000000, 'google_results', '{}');

  select lives_ok(
    $$ select fsm.handle_machine_events(80000000000) $$,
    'handle the google_results event'
  );

  select is(
    array_agg(state_id)
  , array['binging', 'checking_bing', 'googling', 'got_google', 'searching']
  , 'when a composite state activates its final state, the parent remains activated'
  )
  from (
    select state_id
    from fsm.state_machine_state
    where state_machine_id = 80000000000 and exited_at is null
    order by state_id
  ) c;

  select is(
      array_agg(name)
    , array['done.state.googling', 'done.state.got_google']
    , 'done.state.got_google and googling should be raised'
  )
  from (
      select name
      from fsm.state_machine_event
      where state_machine_id = 80000000000 and handled_at is null
      order by name
  ) c;

  -- Get results fro bing
  insert into fsm.state_machine_event
    (state_machine_id, name, data) values
    (80000000000, 'bing_results', '{}');

  select lives_ok(
    $$ select fsm.handle_machine_events(80000000000) $$,
    'handle the bing_results event'
  );

  select is(
    array_agg(state_id)
  , array['binging', 'googling', 'got_bing', 'got_google', 'searching']
  , 'The searching parallel state should have reached all final states'
  )
  from (
      select state_id
      from fsm.state_machine_state
      where state_machine_id = 80000000000 and exited_at is null
      order by state_id
  ) c;

  select is(
      array_agg(name)
    , array['done.state.binging', 'done.state.got_bing', 'done.state.searching']
    , 'donde events up to serching should be raised'
  )
  from (
      select name
      from fsm.state_machine_event
      where state_machine_id = 80000000000 and handled_at is null
      order by name
  ) c;


  select finish();
ROLLBACK;

