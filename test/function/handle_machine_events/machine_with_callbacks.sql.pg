BEGIN;
  select plan(33);

  -- will be used to track which callbacks were executed
  create temporary table pg_temp.callbacks_called (
    id bigint,
    event text,
    data jsonb,
    from_state text,
    to_state text,
    payload_type text
  );

  -- will be used as the callback for all states as the witness that they are called
  create or replace function pg_temp.log_callback_execution(payload fsm_event_payload)
    returns void as
    $$
        insert into pg_temp.callbacks_called
        (id, event, data, from_state, to_state, payload_type) values
        ( payload.machine_id
        , payload.event_name
        , payload.data
        , payload.from_state
        , payload.to_state
        , payload.payload_type)
    $$ language sql volatile;


  \i test/fixtures/composite_machine.sql

  update fsm.state set
      on_entry = ('pg_temp', 'log_callback_execution')
    , on_exit = ('pg_temp', 'log_callback_execution')
  where statechart_id = 9000000001;

  -- creating a new machine should be a function
  insert into fsm.state_machine
    (id          , statechart_id) values
    (80000000000 , 9000000001);

  insert into fsm.state_machine_state
    (state_machine_id, statechart_id, state_id) values
    (80000000000, 9000000001, 'initial');







  -- transition to the search state, which should activate all initial sub-states

  insert into fsm.state_machine_event
    (state_machine_id, name, data) values
    (80000000000, 'search', '{"for": "search"}');

  select lives_ok(
    $$ select fsm.handle_machine_events(80000000000) $$,
    'handled a single simple event'
  );

  select
      is(data, '{"for": "search"}'::jsonb, 'the data payload is the same for all')
  from callbacks_called
  where id = 80000000000 and event = 'search';

  select
      is(from_state, 'initial', 'the from_state is the same for all')
  from callbacks_called
  where id = 80000000000 and event = 'search';

  select
    is(
      array_agg(to_state)
    , array['searching', 'googling', 'checking_google', 'binging', 'checking_bing']
    , 'only initial states should have fired the on_entry callback, in the right order'
    )
  from callbacks_called
  where id = 80000000000
    and event = 'search'
    and payload_type = 'on_entry';

  select
    is(
      array_agg(to_state)
    , array['searching']
    , 'only searching should appear as the to_state when the payload_type is on_exit'
    )
  from callbacks_called
  where id = 80000000000
    and event = 'search'
    and payload_type = 'on_exit';






  -- clean the table to make the rest of the tests easier
  delete from callbacks_called;

  -- Only get results from google now
  insert into fsm.state_machine_event
    (state_machine_id, name, data) values
    (80000000000, 'google_results', '{"results": "google"}');

  select lives_ok(
    $$ select fsm.handle_machine_events(80000000000) $$,
    'handled a single simple event'
  );

  select
      is(data, '{"results": "google"}'::jsonb, 'same google results or all callbacks')
  from callbacks_called
  where id = 80000000000 and event = 'google_results';

  select
      is(from_state, 'checking_google', 'the from state should be checking_google')
  from callbacks_called
  where id = 80000000000 and event = 'google_results';

  select
      is(to_state, 'got_google', 'the from state should be got_google')
  from callbacks_called
  where id = 80000000000 and event = 'google_results';






  -- clean the table to make the rest of the tests easier
  delete from callbacks_called;

  -- Get results from bing
  insert into fsm.state_machine_event
    (state_machine_id, name, data) values
    (80000000000, 'bing_results', '{"results": "bing"}');

  select lives_ok(
    $$ select fsm.handle_machine_events(80000000000) $$,
    'handle the bing_results event'
  );

  select
      is(data, '{"results": "bing"}'::jsonb, 'same bing results or all callbacks')
  from callbacks_called
  where id = 80000000000 and event = 'bing_results';

  select
      is(from_state, 'checking_bing', 'the from state should be checking_bing')
  from callbacks_called
  where id = 80000000000 and event = 'bing_results';

  select
      is(to_state, 'got_bing', 'the from state should be got_bing')
  from callbacks_called
  where id = 80000000000 and event = 'bing_results';







  -- clean the table to make the rest of the tests easier
  delete from callbacks_called;

  -- The last transition should have generated a few done events
  -- let's process them
  select lives_ok(
    $$ select fsm.handle_machine_events(80000000000) $$,
    'handle the done events'
  );

  select is(count(*), 6::bigint, 'there should be 8 logged callbacks')
  from callbacks_called
  where id = 80000000000;

  select
    is(
      array_agg(from_state)
    , array['googling', 'got_google', 'binging', 'got_bing', 'searching']
    , 'only active states should have fired the on_exit callback, in the right order'
    )
  from callbacks_called
  where id = 80000000000
    and payload_type = 'on_exit';

  select
    is(
      array_agg(to_state)
    , array['displaying']
    , 'only displaying should have executed the on_entry callback'
    )
  from callbacks_called
  where id = 80000000000
    and payload_type = 'on_entry';

  select finish();
ROLLBACK;
