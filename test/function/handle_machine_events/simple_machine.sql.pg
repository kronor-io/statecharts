BEGIN;
  select plan(30);

  \set shard 7000000001
  \set chart 9000000001

  insert into fsm.statechart (id, name, version) values (:chart, 'search', 1::semver);

  insert into fsm.state
    (statechart_id , id           , name                 , parent_id , is_initial , is_final) values
    (:chart        , 'initial'    , 'Initial'            , null      , true       , false)           ,
    (:chart        , 'searching'  , 'Searching'          , null      , false      , false)           ,
    (:chart        , 'displaying' , 'Displaying Results' , null      , false      , false)           ,
    (:chart        , 'zoomed_in'  , 'Zoomed In'          , null      , false      , false);

  insert into fsm.transition
    (statechart_id , event      , source_state , target_state) values
    (:chart        , 'search'   , 'initial'    , 'searching')         ,
    (:chart        , 'results'  , 'searching'  , 'displaying')        ,
    (:chart        , 'zoom'     , 'displaying' , 'zoomed_in')         ,
    (:chart        , 'zoom_out' , 'zoomed_in'  , 'displaying');

  -- creating a new machine should be a function
  select id as machine from fsm.create_machine(:shard, :chart) \gset
  select fsm.start_machine(:shard, :machine);

  -- transition to the search state

  select fsm.notify_state_machine(:shard, :machine, 'search');

  select lives_ok(
    format($$ select fsm.handle_machine_events(%s, %s) $$, :shard, :machine),
    'handled a single simple event'
  );

  select is(count(*), 0::bigint, 'all events should be handled')
  from fsm.state_machine_event
  where shard_id = :shard and state_machine_id = :machine and handled_at is null;

  select isnt(exited_at, null, 'should have exited the initial event')
  from fsm.state_machine_state
  where shard_id = :shard and state_machine_id = :machine and state_id = 'initial';

  select is(count(*), 1::bigint, 'there sould only be one active state')
  from fsm.state_machine_state
  where shard_id = :shard and state_machine_id = :machine and exited_at is null;

  select is(state_id, 'searching', 'the active state should be searching')
  from fsm.state_machine_state
  where shard_id = :shard and state_machine_id = :machine and exited_at is null;

  -- transition to the displaying state

  select fsm.notify_state_machine(:shard, :machine, 'results');

  select lives_ok(
    format($$ select fsm.handle_machine_events(%s, %s) $$, :shard, :machine),
    'handled a single simple event'
  );

  select is(count(*), 0::bigint, 'all events should be handled')
  from fsm.state_machine_event
  where shard_id = :shard and state_machine_id = :machine and handled_at is null;

  select isnt(exited_at, null, 'should have exited the search event')
  from fsm.state_machine_state
  where shard_id = :shard and state_machine_id = :machine and state_id = 'searching';

  select is(count(*), 1::bigint, 'there sould only be one active state')
  from fsm.state_machine_state
  where shard_id = :shard and state_machine_id = :machine and exited_at is null;

  select is(state_id, 'displaying', 'the active state should be displaying')
  from fsm.state_machine_state
  where shard_id = :shard and state_machine_id = :machine and exited_at is null;

  -- transition to the zoomed_in state

  select fsm.notify_state_machine(:shard, :machine, 'zoom');

  select lives_ok(
    format($$ select fsm.handle_machine_events(%s, %s) $$, :shard, :machine),
    'handle the zoom event'
  );

  select is(count(*), 0::bigint, 'all events should be handled')
  from fsm.state_machine_event
  where shard_id = :shard and state_machine_id = :machine and handled_at is null;

  select isnt(exited_at, null, 'should have exited the displaying event')
  from fsm.state_machine_state
  where shard_id = :shard and state_machine_id = :machine and state_id = 'displaying';

  select is(count(*), 1::bigint, 'there sould only be one active state')
  from fsm.state_machine_state
  where shard_id = :shard and state_machine_id = :machine and exited_at is null;

  select is(state_id, 'zoomed_in', 'the active state should be displaying')
  from fsm.state_machine_state
  where shard_id = :shard and state_machine_id = :machine and exited_at is null;

  -- transition back to displaying

  select fsm.notify_state_machine(:shard, :machine, 'zoom_out');

  select lives_ok(
    format($$ select fsm.handle_machine_events(%s, %s) $$, :shard, :machine),
    'handle the zoom_out event'
  );

  select is(count(*), 0::bigint, 'all events should be handled')
  from fsm.state_machine_event
  where shard_id = :shard and state_machine_id = :machine and handled_at is null;

  select isnt(exited_at, null, 'should have exited the displaying event')
  from fsm.state_machine_state
  where shard_id = :shard and state_machine_id = :machine and state_id = 'zoomed_in';

  select is(count(*), 1::bigint, 'there sould only be one active state')
  from fsm.state_machine_state
  where shard_id = :shard and state_machine_id = :machine and exited_at is null;

  select is(state_id, 'displaying', 'the active state should be displaying')
  from fsm.state_machine_state
  where shard_id = :shard and state_machine_id = :machine and exited_at is null;


  -- verify that events with no associated transitions are not an issue

  select fsm.notify_state_machine(:shard, :machine, 'derp');

  select lives_ok(
    format($$ select fsm.handle_machine_events(%s, %s) $$, :shard, :machine),
    'handle the derp event'
  );

  select is(count(*), 0::bigint, 'all events should be handled')
  from fsm.state_machine_event
  where shard_id = :shard and state_machine_id = :machine and handled_at is null;

  select isnt(exited_at, null, 'should have exited the zoomed_in event')
  from fsm.state_machine_state
  where shard_id = :shard and state_machine_id = :machine and state_id = 'zoomed_in';

  select is(count(*), 1::bigint, 'there sould only be one active state')
  from fsm.state_machine_state
  where shard_id = :shard and state_machine_id = :machine and exited_at is null;

  select is(state_id, 'displaying', 'the active state should be displaying')
  from fsm.state_machine_state
  where shard_id = :shard and state_machine_id = :machine and exited_at is null;


  -- verify that multiple events can be handled at once as long as they come in order
  \set machine 80000000001

  -- creating a new machine should be a function
  insert into fsm.state_machine
    (shard_id , id       , statechart_id) values
    (:shard   , :machine , :chart);

  insert into fsm.state_machine_state
    (shard_id , state_machine_id , statechart_id , state_id) values
    (:shard   , :machine         , :chart        , 'initial');


  -- transition to the search state

  insert into fsm.state_machine_event
    (shard_id , state_machine_id , name      , data) values
    (:shard   , :machine         , 'search'  , '{}')        ,
    (:shard   , :machine         , 'results' , '{}')        ,
    (:shard   , :machine         , 'zoom'    , '{}');

  select lives_ok(
    format($$ select fsm.handle_machine_events(%s, %s) $$, :shard, :machine),
    'handle all the events'
  );

  select is(count(*), 0::bigint, 'all events should be handled')
  from fsm.state_machine_event
  where shard_id = :shard and state_machine_id = :machine and handled_at is null;

  select isnt(exited_at, null, 'should have exited the displaying event')
  from fsm.state_machine_state
  where shard_id = :shard and state_machine_id = :machine and state_id = 'displaying';

  select is(count(*), 1::bigint, 'there sould only be one active state')
  from fsm.state_machine_state
  where shard_id = :shard and state_machine_id = :machine and exited_at is null;

  select is(state_id, 'zoomed_in', 'the active state should be zoomed_in')
  from fsm.state_machine_state
  where shard_id = :shard and state_machine_id = :machine and exited_at is null;

  select finish();
ROLLBACK;
