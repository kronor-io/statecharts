BEGIN;
  select plan(3);

  \set shard 7000000001
  \set machine 80000000000
  \set chart 9000000001

  \i test/fixtures/machine_with_parents.sql

  -- creating a new machine should be a function
  insert into fsm.state_machine
    (shard_id , id       , statechart_id) values
    (:shard   , :machine , :chart);

  insert into fsm.state_machine_state
    (shard_id , state_machine_id , statechart_id , state_id) values
    (:shard   , :machine         , :chart        , 'searching')       ,
    (:shard   , :machine         , :chart        , 'googling')        ,
    (:shard   , :machine         , :chart        , 'checking_google') ,
    (:shard   , :machine         , :chart        , 'binging')         ,
    (:shard   , :machine         , :chart        , 'checking_bing');

  select is(array_agg(p.id), null, 'when no final state has been reached it should return null')
  from fsm.get_finalized_parents(
      :shard
    , :machine
    , (select parent_path from fsm.state where id = 'checking_google')
  ) p;

  update fsm.state_machine_state set exited_at = now()
    where shard_id = :shard
      and state_machine_id = :machine
      and state_id = 'checking_google';

  insert into fsm.state_machine_state
    (shard_id , state_machine_id , statechart_id , state_id) values
    (:shard   , :machine         , :chart        , 'got_google');

  select is(
      array_agg(p.id)
    , array['googling']
    , 'when only one parallel state finishes only the immediate parent should be present'
  )
  from fsm.get_finalized_parents(
      :shard
    , :machine
    , (select parent_path from fsm.state where id = 'got_google')
  ) p;

  update fsm.state_machine_state set exited_at = now()
    where shard_id = :shard
      and state_machine_id = :machine
      and state_id = 'checking_bing';

  insert into fsm.state_machine_state
    (shard_id , state_machine_id , statechart_id , state_id) values
    (:shard   , :machine         , :chart        , 'got_bing');

  -- note that the results do not include the parent state "research", this is becuase
  -- there still is a possible transition going from searching to read_results inside thre
  -- "research" node. This means that we cannot consider "research" finalized.
  select
    is(
      array_agg(p.id)
    , array['binging', 'searching']
    , 'when all the final states for a parallel node are reached, the parent node is present in the result'
    )
  from (
    select p.id
    from
        fsm.get_finalized_parents(
          :shard
        , :machine
        , (select parent_path from fsm.state where id = 'got_bing')
        ) p
    order by p.id
   ) p;


  select finish();
ROLLBACK;
